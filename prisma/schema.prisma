generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model goals {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?        @db.Uuid
  name          String?
  target_amount Int
  saved_amount  Int?           @default(0)
  created_at    DateTime?      @default(now()) @db.Timestamptz(6)
  archived      Boolean?       @default(false)
  users         users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions  transactions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  goal_id    String?    @db.Uuid
  amount     Int
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  type       type_enum?
  goals      goals?     @relation(fields: [goal_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @unique
  password       String
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  goals          goals[]
  refresh_tokens refresh_tokens[]
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.Uuid
  token      String    @unique
  is_revoked Boolean?  @default(false)
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum type_enum {
  expense
  income
}
